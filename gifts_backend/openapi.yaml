openapi: 3.0.0
info:
  title: Gift Management REST API
  description: An API for a gift-managing service for friends and families
  version: 1.0.0

servers:
  - url: /api

components:
  schemas:
    UserWithoutPassword:
      type: object
      required:
        - email
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: ex@ample.com
        firstName:
          type: string
          example: Max
        lastName:
          type: string
          example: Mustermann
        avatar:
          type: string
    User:
      allOf:
        - $ref: '#/components/schemas/UserWithoutPassword'
        - type: object
          required:
            - password
          properties:
            password:
              type: string
              format: password
              example: very1Secure$Password2With&Special3Characters_
    UserSetNewPassword:
      allOf:
        - $ref: '#/components/schemas/UserWithoutPassword'
        - type: object
          properties:
            oldPassword:
              type: string
              format: password
              example: very1Secure$Password2With&Special3Characters_
            newPassword:
              type: string
              format: password
              example: very1Secure$Password2With&Special3Characters_
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: ex@ample.com
        password:
          type: string
          format: password
          example: very1Secure$Password2With&Special3Characters_
    Gift:
      type: object
      required:
        - name
        - price
        - giftStrength
      properties:
        name:
          type: string
          example: A very cool gift
        price:
          type: number
          format: float
          minimum: 0
          multipleOf: 0.01
          example: 12.24
        giftStrength:
          type: string
          enum: [ OKAY, GOOD, GREAT, AMAZING, AWESOME ]
          example: AWESOME
        description:
          type: string
          example: A description of the item
        link:
          type: string
          format: uri
          example: www.amazon.de
        picture:
          type: string
          format: binary
          nullable: true
        freeForReservationRequest:
          type: array
          items:
            $ref: '#/components/schemas/UserWithoutPassword'
        availableActions:
          type: array
          items:
            type: string
            enum: [ EDIT, DELETE, RESERVE, STOP_RESERVE, FREE_RESERVE, STOP_FREE_RESERVE, REQUEST_FREE_RESERVE, STOP_REQUEST_FREE_RESERVE ]
        isSecretGift:
          type: boolean
        reservingUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserWithoutPassword'
    GiftGroup:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: A group for my dog
        editable:
          type: boolean
          example: true
        isBeingGifted:
          type: boolean
          example: false
        usersBeingGifted:
          type: array
          items:
            $ref: "#/components/schemas/UserWithoutPassword"
        isInvited:
          type: boolean
          example: false
        invitations:
          type: array
          items:
            $ref: "#/components/schemas/UserWithoutPassword"
        invitableUsers:
          type: array
          items:
            $ref: "#/components/schemas/UserWithoutPassword"
    Event:
      type: object
      required:
        - name
        - date
      properties:
        name:
          type: string
          example: Birthday of Max Mustermann
        date:
          type: string
          format: date
          example: 2020-01-01
    Comment:
      type: object
      required:
        - content
        - public
      properties:
        content:
          type: string
          example: This is the content of the comment. It can and probably wil be a longer text.
        public:
          type: boolean
          example: false
    PasswordWithAuthCode:
      type: object
      required:
        - password
        - code
      properties:
        password:
          type: string
          format: password
        code:
          type: string

  parameters:
    email:
      in: path
      name: email
      description: e-Mail-Address of the User
      example: ex@ample.com
      required: true
      schema:
        type: string
        format: email

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: api.users.decode_token

security:
  - bearerAuth: [ ]
paths:
  /users:
    post:
      operationId: api.users.create
      tags:
        - User
      summary: Create a new User
      requestBody:
        x-body-name: user
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: Successfully created user
        406:
          description: User with that email already exists
      security:
        [ ]
    get:
      operationId: api.users.read_all
      tags:
        - User
      summary: Read the list of Users
      responses:
        200:
          description: Succesfully read User list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithoutPassword"
        401:
          description: User is not authorized to read User list
  /users/{email}:
    post:
      operationId: api.users.sendPasswordResetEmail
      summary: Sends an Email to the User with a Reset-Code
      tags:
        - User
        - Authentication
      parameters:
        - $ref: "#/components/parameters/email"
      responses:
        200:
          description: Succesfully send email
      security:
        [ ]
    patch:
      operationId: api.users.resetPassword
      summary: Resets the password, if the given Code is correct
      tags:
        - User
        - Authentication
      parameters:
        - $ref: "#/components/parameters/email"
      requestBody:
        x-body-name: password_and_code
        description: The new password and the code to check authentication
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordWithAuthCode"
      responses:
        200:
          description: Succesfully set Password
      security:
        [ ]
    delete:
      operationId: api.users.delete
      summary: Delete an User
      tags:
        - User
      parameters:
        - $ref: "#/components/parameters/email"
      responses:
        204:
          description: Succesfully deleted the user
    put:
      operationId: api.users.update
      summary: Update an User
      tags:
        - User
      parameters:
        - $ref: "#/components/parameters/email"
      requestBody:
        x-body-name: new_user_data
        description: User data to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSetNewPassword"
      responses:
        200:
          description: Succesfully updated user
  /giftgroups:
    get:
      operationId: api.giftgroups.read_all
      tags:
        - Gift Groups
      summary: Read the list of Giftgroups for the authorized user
      responses:
        200:
          description: Successfully read Giftgroup list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GiftGroup"
    post:
      operationId: api.giftgroups.create
      tags:
        - Gift Groups
      summary: Create a Giftgroups for the authorized user
      requestBody:
        x-body-name: giftgroup
        description: Giftgroup to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GiftGroup"
      responses:
        201:
          description: Successfully created Giftgroup
  /giftgroups/{giftgroup_id}:
    put:
      operationId: api.giftgroups.update
      tags:
        - Gift Groups
      summary: Update an existing Giftgroup
      requestBody:
        x-body-name: giftgroup
        description: Giftgroup to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GiftGroup"
      parameters:
        - in: path
          name: giftgroup_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the existing group
          example: 4
      responses:
        201:
          description: Succesfully updated Giftgroup
    post:
      operationId: api.giftgroups.addUserToGroup
      tags:
        - Gift Groups
      summary: Add an User to an existing Giftgroup
      parameters:
        - in: path
          name: giftgroup_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the group the user should be added to
          example: 4
        - in: query
          name: decline
          schema:
            type: boolean
          description: Used to decline the Invitation
      responses:
        201:
          description: Succesfully created Giftgroup-user relation
  /giftgroups/{giftgroup_id}/{email}:
    delete:
      operationId: api.giftgroups.removeUserFromGroup
      tags:
        - Gift Groups
      summary: remove a user from a Group and delete that Group if there are no more related users
      parameters:
        - $ref: "#/components/parameters/email"
        - in: path
          name: giftgroup_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the group the user should be removed from
          example: 4
      responses:
        204:
          description: Succesfully removed the user from the Group
  /auth/login:
    post:
      operationId: api.users.login
      tags:
        - Authentication
      summary: Validates Userlogin and returns bearertoken
      requestBody:
        x-body-name: authentication
        description: Email and Password to validate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        201:
          description: Succesfully logged in
      security:
        [ ]
  /auth/getSession:
    get:
      operationId: api.users.get_session
      tags:
        - Authentication
      summary: Returns User Data after login
      responses:
        200:
          description: Succesfully got Session
  /gifts/{giftgroup_id}:
    post:
      operationId: api.gifts.create
      tags:
        - Gift
      summary: Create a new Gift
      requestBody:
        x-body-name: gift
        description: Gift to create
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Gift"
      parameters:
        - in: path
          name: giftgroup_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the group the user should be added to
          example: 4
      responses:
        201:
          description: Successfully created Gift
    get:
      operationId: api.gifts.read
      tags:
        - Gift
      summary: Read the list of Gifts seen by the authorized User in that Group
      parameters:
        - in: path
          name: giftgroup_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the group the gift should be added to
          example: 4
      responses:
        200:
          description: Succesfully read Gift list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Gift"
  /gifts:
    get:
      operationId: api.gifts.read_all
      tags:
        - Gift
      summary: Read the list of Gifts seen by the authorized User in all Groups
      responses:
        200:
          description: Succesfully read Gift list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Gift"
  /gifts/{giftgroup_id}/{gift_id}:
    put:
      operationId: api.gifts.update
      tags:
        - Gift
      summary: Update a Gift
      requestBody:
        x-body-name: gift
        description: Gift to update
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Gift"
      parameters:
        - in: path
          name: giftgroup_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the group of the too be updated gift
          example: 4
        - in: path
          name: gift_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the to be updated gift
          example: 4
      responses:
        200:
          description: Successfully updated gift
    delete:
      operationId: api.gifts.delete
      tags:
        - Gift
      summary: Delete a Gift
      parameters:
        - in: path
          name: giftgroup_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the group of the to be deleted gift
          example: 4
        - in: path
          name: gift_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the to be deleted gift
          example: 4
      responses:
        204:
          description: Successfully deleted the gift
    patch:
      operationId: api.gifts.patch
      tags:
        - Gift
      summary: Do an Action on the gift in a certain giftgroup
      parameters:
        - in: path
          name: giftgroup_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the group of the to be deleted gift
          example: 4
        - in: path
          name: gift_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the to be deleted gift
          example: 4
        - in: query
          name: reserve
          schema:
            type: boolean
          description: Whether the gift should be reserved or the reservation should be canceled
        - in: query
          name: free_reserve
          schema:
            type: boolean
          description: Whether the gift should reservable by more users or this behaviour should be stopped
        - in: query
          name: request_free_reserve
          schema:
            type: boolean
          description: Whether the user requests to have free reservation or stop this behaviour
        - in: query
          name: deny_free_reserve
          schema:
            type: boolean
          description: Whether the user requests to deny the free reservation request
      responses:
        200:
          description: Successfully updated gift
  /events:
    post:
      operationId: api.events.create
      tags:
        - Event
      summary: Create a new Event
      requestBody:
        x-body-name: event
        description: Event to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        201:
          description: Successfully created Event
    get:
      operationId: api.events.read_all
      tags:
        - Event
      summary: Read the list of all Events
      responses:
        200:
          description: Succesfully read Event list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
  /events/{event_id}:
    put:
      operationId: api.events.update
      tags:
        - Event
      summary: Update an existing Event
      requestBody:
        x-body-name: event
        description: Event to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      parameters:
        - in: path
          name: event_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the event of the too be updated gift
          example: 4
      responses:
        200:
          description: Successfully updated Event
    delete:
      operationId: api.events.delete
      tags:
        - Event
      summary: Delete an existing Event
      parameters:
        - in: path
          name: event_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the event of the too be updated gift
          example: 4
      responses:
        204:
          description: Successfully deleted the Event
  /comments/{gift_id}:
    post:
      operationId: api.comments.create
      tags:
        - Comment
      summary: Create a new Comment
      requestBody:
        x-body-name: comment
        description: Comment to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      parameters:
        - in: path
          name: gift_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the gift the comment should be added to
          example: 4
      responses:
        201:
          description: Successfully created Comment
        404:
          description: No Gift with that id
        400:
          description: User can't create a comment he can't access afterwards
    get:
      operationId: api.comments.read_all
      tags:
        - Comment
      summary: Read the list of all Comments of the gift the authorized user can see
      parameters:
        - in: path
          name: gift_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the gift the comment should be added to
          example: 4
      responses:
        200:
          description: Succesfully read Comment list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Gift"
        404:
          description: No Gift with that id
  /comments/{gift_id}/{comment_id}:
    put:
      operationId: api.comments.update
      tags:
        - Comment
      summary: Update an existing Comment
      requestBody:
        x-body-name: comment
        description: Comment to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      parameters:
        - in: path
          name: gift_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the existing gift
          example: 4
        - in: path
          name: comment_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the existing comment
          example: 4
      responses:
        200:
          description: Successfully updated comment
        404:
          description: No Comment or gift with that id
        403:
          description: User not allowed to update comment
        400:
          description: User can't change visibility so that he can't access his comment
    delete:
      operationId: api.comments.delete
      tags:
        - Comment
      summary: Delete an existing Comment
      parameters:
        - in: path
          name: gift_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the existing gift
          example: 4
        - in: path
          name: comment_id
          schema:
            type: integer
            format: integer
          required: true
          description: the id of the existing comment
          example: 4
      responses:
        204:
          description: Successfully deleted the comment
        404:
          description: No Comment or gift with that id
        403:
          description: User not allowed to delete comment